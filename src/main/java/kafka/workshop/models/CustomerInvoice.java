/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.workshop.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CustomerInvoice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6956426324863363140L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerInvoice\",\"namespace\":\"kafka.workshop.models\",\"fields\":[{\"name\":\"invoiceId\",\"type\":\"string\"},{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"invoiceDate\",\"type\":\"long\",\"logicalType\":\"Timestamp\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CustomerInvoice> ENCODER =
      new BinaryMessageEncoder<CustomerInvoice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CustomerInvoice> DECODER =
      new BinaryMessageDecoder<CustomerInvoice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CustomerInvoice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CustomerInvoice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CustomerInvoice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CustomerInvoice>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CustomerInvoice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CustomerInvoice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CustomerInvoice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CustomerInvoice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence invoiceId;
   private java.lang.CharSequence customerId;
   private int amount;
   private int age;
   private java.lang.CharSequence state;
   private java.lang.CharSequence country;
   private java.lang.CharSequence gender;
   private long invoiceDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerInvoice() {}

  /**
   * All-args constructor.
   * @param invoiceId The new value for invoiceId
   * @param customerId The new value for customerId
   * @param amount The new value for amount
   * @param age The new value for age
   * @param state The new value for state
   * @param country The new value for country
   * @param gender The new value for gender
   * @param invoiceDate The new value for invoiceDate
   */
  public CustomerInvoice(java.lang.CharSequence invoiceId, java.lang.CharSequence customerId, java.lang.Integer amount, java.lang.Integer age, java.lang.CharSequence state, java.lang.CharSequence country, java.lang.CharSequence gender, java.lang.Long invoiceDate) {
    this.invoiceId = invoiceId;
    this.customerId = customerId;
    this.amount = amount;
    this.age = age;
    this.state = state;
    this.country = country;
    this.gender = gender;
    this.invoiceDate = invoiceDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return invoiceId;
    case 1: return customerId;
    case 2: return amount;
    case 3: return age;
    case 4: return state;
    case 5: return country;
    case 6: return gender;
    case 7: return invoiceDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: invoiceId = (java.lang.CharSequence)value$; break;
    case 1: customerId = (java.lang.CharSequence)value$; break;
    case 2: amount = (java.lang.Integer)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: state = (java.lang.CharSequence)value$; break;
    case 5: country = (java.lang.CharSequence)value$; break;
    case 6: gender = (java.lang.CharSequence)value$; break;
    case 7: invoiceDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'invoiceId' field.
   * @return The value of the 'invoiceId' field.
   */
  public java.lang.CharSequence getInvoiceId() {
    return invoiceId;
  }


  /**
   * Sets the value of the 'invoiceId' field.
   * @param value the value to set.
   */
  public void setInvoiceId(java.lang.CharSequence value) {
    this.invoiceId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public int getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(int value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'invoiceDate' field.
   * @return The value of the 'invoiceDate' field.
   */
  public long getInvoiceDate() {
    return invoiceDate;
  }


  /**
   * Sets the value of the 'invoiceDate' field.
   * @param value the value to set.
   */
  public void setInvoiceDate(long value) {
    this.invoiceDate = value;
  }

  /**
   * Creates a new CustomerInvoice RecordBuilder.
   * @return A new CustomerInvoice RecordBuilder
   */
  public static kafka.workshop.models.CustomerInvoice.Builder newBuilder() {
    return new kafka.workshop.models.CustomerInvoice.Builder();
  }

  /**
   * Creates a new CustomerInvoice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerInvoice RecordBuilder
   */
  public static kafka.workshop.models.CustomerInvoice.Builder newBuilder(kafka.workshop.models.CustomerInvoice.Builder other) {
    if (other == null) {
      return new kafka.workshop.models.CustomerInvoice.Builder();
    } else {
      return new kafka.workshop.models.CustomerInvoice.Builder(other);
    }
  }

  /**
   * Creates a new CustomerInvoice RecordBuilder by copying an existing CustomerInvoice instance.
   * @param other The existing instance to copy.
   * @return A new CustomerInvoice RecordBuilder
   */
  public static kafka.workshop.models.CustomerInvoice.Builder newBuilder(kafka.workshop.models.CustomerInvoice other) {
    if (other == null) {
      return new kafka.workshop.models.CustomerInvoice.Builder();
    } else {
      return new kafka.workshop.models.CustomerInvoice.Builder(other);
    }
  }

  /**
   * RecordBuilder for CustomerInvoice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerInvoice>
    implements org.apache.avro.data.RecordBuilder<CustomerInvoice> {

    private java.lang.CharSequence invoiceId;
    private java.lang.CharSequence customerId;
    private int amount;
    private int age;
    private java.lang.CharSequence state;
    private java.lang.CharSequence country;
    private java.lang.CharSequence gender;
    private long invoiceDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.workshop.models.CustomerInvoice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.invoiceId)) {
        this.invoiceId = data().deepCopy(fields()[0].schema(), other.invoiceId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.gender)) {
        this.gender = data().deepCopy(fields()[6].schema(), other.gender);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.invoiceDate)) {
        this.invoiceDate = data().deepCopy(fields()[7].schema(), other.invoiceDate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerInvoice instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.workshop.models.CustomerInvoice other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.invoiceId)) {
        this.invoiceId = data().deepCopy(fields()[0].schema(), other.invoiceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gender)) {
        this.gender = data().deepCopy(fields()[6].schema(), other.gender);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.invoiceDate)) {
        this.invoiceDate = data().deepCopy(fields()[7].schema(), other.invoiceDate);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'invoiceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getInvoiceId() {
      return invoiceId;
    }


    /**
      * Sets the value of the 'invoiceId' field.
      * @param value The value of 'invoiceId'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setInvoiceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.invoiceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceId' field has been set.
      * @return True if the 'invoiceId' field has been set, false otherwise.
      */
    public boolean hasInvoiceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'invoiceId' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearInvoiceId() {
      invoiceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public int getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setAmount(int value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setState(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.state = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearState() {
      state = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.gender = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearGender() {
      gender = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoiceDate' field.
      * @return The value.
      */
    public long getInvoiceDate() {
      return invoiceDate;
    }


    /**
      * Sets the value of the 'invoiceDate' field.
      * @param value The value of 'invoiceDate'.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder setInvoiceDate(long value) {
      validate(fields()[7], value);
      this.invoiceDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceDate' field has been set.
      * @return True if the 'invoiceDate' field has been set, false otherwise.
      */
    public boolean hasInvoiceDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'invoiceDate' field.
      * @return This builder.
      */
    public kafka.workshop.models.CustomerInvoice.Builder clearInvoiceDate() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CustomerInvoice build() {
      try {
        CustomerInvoice record = new CustomerInvoice();
        record.invoiceId = fieldSetFlags()[0] ? this.invoiceId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Integer) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.state = fieldSetFlags()[4] ? this.state : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.gender = fieldSetFlags()[6] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.invoiceDate = fieldSetFlags()[7] ? this.invoiceDate : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CustomerInvoice>
    WRITER$ = (org.apache.avro.io.DatumWriter<CustomerInvoice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CustomerInvoice>
    READER$ = (org.apache.avro.io.DatumReader<CustomerInvoice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.invoiceId);

    out.writeString(this.customerId);

    out.writeInt(this.amount);

    out.writeInt(this.age);

    out.writeString(this.state);

    out.writeString(this.country);

    out.writeString(this.gender);

    out.writeLong(this.invoiceDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.invoiceId = in.readString(this.invoiceId instanceof Utf8 ? (Utf8)this.invoiceId : null);

      this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);

      this.amount = in.readInt();

      this.age = in.readInt();

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

      this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);

      this.invoiceDate = in.readLong();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.invoiceId = in.readString(this.invoiceId instanceof Utf8 ? (Utf8)this.invoiceId : null);
          break;

        case 1:
          this.customerId = in.readString(this.customerId instanceof Utf8 ? (Utf8)this.customerId : null);
          break;

        case 2:
          this.amount = in.readInt();
          break;

        case 3:
          this.age = in.readInt();
          break;

        case 4:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        case 5:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        case 6:
          this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);
          break;

        case 7:
          this.invoiceDate = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










